/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.48.v20220622
 * Generated at: 2023-03-30 11:12:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.includes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.opennms.core.utils.WebSecurityUtils;
import org.opennms.web.servlet.MissingParameterException;

public final class resultsIndexNoCount_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    protected static final String DEFAULT_LIMIT_PARAM_NAME    = "limit";
    protected static final String DEFAULT_MULTIPLE_PARAM_NAME = "multiple";

    protected static final int DEFAULT_LIMIT    = 25;
    protected static final int DEFAULT_MULTIPLE = 0;

    protected static final int LOWER_OFFSET = 5;
    protected static final int UPPER_OFFSET = 4;

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.opennms.core.utils.WebSecurityUtils");
    _jspx_imports_classes.add("org.opennms.web.servlet.MissingParameterException");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

    //required parameter count
    String itemCountString = request.getParameter("itemCount");
    if( itemCountString == null ) {
        throw new MissingParameterException("itemCount", new String[] {"itemCount", "baseurl"});
    }
    
    //required parameter baseurl    
    String baseUrl = request.getParameter("baseurl");
    if( baseUrl == null ) {
        throw new MissingParameterException("baseurl", new String[] {"itemCount", "baseurl"});
    }

    //optional parameter limit    
    String limitString = request.getParameter("limit");

    //optional parameter multiple    
    String multipleString = request.getParameter("multiple");

    //optional parameter, limitname
    String limitName = request.getParameter("limitname");
    if(limitName == null) {
        limitName = DEFAULT_LIMIT_PARAM_NAME;
    } else {
        limitName = WebSecurityUtils.sanitizeString(limitName);
    }

    //optional parameter, multiplename
    String multipleName = request.getParameter("multiplename");
    if(multipleName == null) {
        multipleName = DEFAULT_MULTIPLE_PARAM_NAME;
    } else {
        multipleName = WebSecurityUtils.sanitizeString(multipleName);
    }

    //get the count    
    long itemCount = WebSecurityUtils.safeParseLong(itemCountString);
    
    //get the limit, use the default if not set in the request
    int limit    = (limitString != null) ? WebSecurityUtils.safeParseInt(limitString) : DEFAULT_LIMIT;
    if (limit < 1) {
    	limit = DEFAULT_LIMIT;
    }

    // get the multiple, use the default if not set in the request
    int multiple = (multipleString != null) ? Math.max(DEFAULT_MULTIPLE, WebSecurityUtils.safeParseInt(multipleString)) : DEFAULT_MULTIPLE;

    //format the base url to accept limit and multiple parameters
    if( baseUrl.indexOf("?") < 0 ) {
        //does not contain a "?", so append one
        baseUrl = baseUrl + "?";
    }
    
    if ( baseUrl.indexOf(limitName) < 0) {
        baseUrl = baseUrl + "&amp;" + limitName + "=" + limit;
    }

    //calculate the start and end numbers of the results that we are showing
    long startResult = (multiple==0) ? 1 : multiple*limit+1;
    long endResult = startResult + itemCount - 1;


      out.write('\n');
      out.write('\n');
      out.write(' ');
 if (limit > 0 ) { 
      out.write(" \n");
      out.write("  <div class=\"text-center my-2\">\n");
      out.write("  <strong>Results ");
      out.print(startResult);
      out.write('-');
      out.print(endResult);
      out.write(",</strong>\n");
      out.write("  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/includes/listSize.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("limitSize", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(limit), request.getCharacterEncoding()), out, false);
      out.write("\n");
      out.write("  </div>\n");
      out.write(" ");
 } else { 
      out.write("\n");
      out.write("  <div class=\"text-center\">\n");
      out.write("  <strong>All Results,</strong>\n");
      out.write("  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/includes/listSize.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("limitSize", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(limit), request.getCharacterEncoding()), out, false);
      out.write("\n");
      out.write("  </div>\n");
      out.write(" ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("  ");
 if( itemCount >= limit || multiple > 0 ) { 
      out.write("\n");
      out.write("  <nav class=\"btn-toolbar\" role=\"toolbar\">\n");
      out.write("      <div class=\"form-group ml-auto mr-auto\">\n");
      out.write("        <a class=\"btn btn-sm btn-secondary ");
      out.print(multiple > 0 ? "" : "disabled");
      out.write("\" role=\"button\" href=\"");
      out.print(baseUrl);
      out.write("&amp;");
      out.print(multipleName);
      out.write("=0\">First</a></a>\n");
      out.write("        <a class=\"btn btn-sm btn-secondary ");
      out.print(multiple > 0 ? "" : "disabled");
      out.write("\" role=\"button\" href=\"");
      out.print(baseUrl);
      out.write("&amp;");
      out.print(multipleName);
      out.write('=');
      out.print(multiple-1);
      out.write("\">Previous</a></a>\n");
      out.write("        <a class=\"btn btn-sm btn-secondary ");
      out.print(itemCount >= limit ? "" : "disabled");
      out.write("\" role=\"button\" href=\"");
      out.print(baseUrl);
      out.write("&amp;");
      out.print(multipleName);
      out.write('=');
      out.print(multiple+1);
      out.write("\">Next</a></a>\n");
      out.write("      </div>\n");
      out.write("  </nav>\n");
      out.write("  ");
 } else { 
      out.write("\n");
      out.write("   <br/>\n");
      out.write("  ");
 } 
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
