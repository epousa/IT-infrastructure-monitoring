/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.48.v20220622
 * Generated at: 2023-03-30 11:12:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.geomap.includes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.opennms.web.api.Util;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


  public String getParameter(HttpServletRequest request, String name) {
    return getParameter(request, name, null);
  }

  // Returns request parameter or default if the parameter does not exist
  public String getParameter(HttpServletRequest request, String name, String defaultValue) {
    String value = request.getParameter(name);
    if (value == null || value.isEmpty() && defaultValue != null && !defaultValue.isEmpty()) {
      return defaultValue;
    }
    return value;
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/home/epousa/dev/opennms/target/opennms-32.0.0-SNAPSHOT/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fmt.tld", Long.valueOf(1425978670000L));
    _jspx_dependants.put("jar:file:/home/epousa/dev/opennms/target/opennms-32.0.0-SNAPSHOT/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425978670000L));
    _jspx_dependants.put("file:/home/epousa/dev/opennms/target/opennms-32.0.0-SNAPSHOT/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1680080132000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.opennms.web.api.Util");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

  final String baseHref = Util.calculateUrlBase( request );
  final String mapId = getParameter(request, "mapId", "map");

      out.write('\n');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/assets/load-assets.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("asset", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("leaflet-js", request.getCharacterEncoding()), out, false);
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/assets/load-assets.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("asset", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("geomap-js", request.getCharacterEncoding()), out, false);
      out.write("\n");
      out.write("\n");
      out.write("<div class=\"geomap\" style=\"height: ");
      out.print( getParameter(request, "height", "400px"));
      out.write("\">\n");
      out.write("  <div style=\"width: 100%; height:100%\" id=\"");
      out.print( mapId );
      out.write("\"></div>\n");
      out.write("\n");
      out.write("  <!-- Template to build the popup for each single marker -->\n");
      out.write("  <div id=\"single-popup\" class=\"node-marker-single\" style=\"display:none\">\n");
      out.write("    <h4>Node <a class=\"node\" href=\"");
      out.print( baseHref );
      out.write("element/node.jsp?node={NODE_ID}\">{NODE_LABEL}</a></h4>\n");
      out.write("    <p>\n");
      out.write("      <a href=\"");
      out.print( baseHref );
      out.write("topology?provider=Enhanced+Linkd&focus-vertices={NODE_ID}\" target=\"_blank\">View in Topology Map</a>\n");
      out.write("    </p>\n");
      out.write("    <p>\n");
      out.write("      Severity: <span class=\"severity {SEVERITY_LABEL}\"><a href=\"");
      out.print( baseHref );
      out.write("alarm/list.htm?sortby=id&acktype=unack&limit=20&filter=node%3D{NODE_ID}\" target=\"_blank\">{SEVERITY_LABEL}</a></span> <br/>\n");
      out.write("      Description: {DESCRIPTION} <br/>\n");
      out.write("      Maint.&nbsp;Contract: {MAINT_CONTRACT} <br/>\n");
      out.write("      IP Address: {IP_ADDRESS} <br/>\n");
      out.write("      Categories: {CATEGORIES}\n");
      out.write("    </p>\n");
      out.write("  </div>\n");
      out.write("\n");
      out.write("  <!-- Template to build the popup for each group cluster -->\n");
      out.write("  <div id=\"multi-popup\" class=\"node-marker-multiple\" style=\"display:none\">\n");
      out.write("    <h4># of nodes: {NUMBER_NODES} ({NUMBER_UNACKED} Unacknowledged Alarms)</h4>\n");
      out.write("    <p>\n");
      out.write("      <a href=\"");
      out.print( baseHref );
      out.write("topology?provider=Enhanced+Linkd&focus-vertices={NODE_IDS}\" target=\"_blank\">View in Topology Map</a>\n");
      out.write("    </p>\n");
      out.write("    <p>\n");
      out.write("      {TABLE_CONTENT}\n");
      out.write("    </p>\n");
      out.write("  </div>\n");
      out.write("\n");
      out.write("  <!-- Template to build the rows for the popup table -->\n");
      out.write("  <div id=\"multi-popup-table-row\" style=\"display:none\">\n");
      out.write("    <table class=\"node-marker-list\">\n");
      out.write("      <tr class=\"node-marker-{SEVERITY_LABEL}\">\n");
      out.write("        <td class=\"node-marker-label\">\n");
      out.write("          <a class=\"node\" href=\"");
      out.print( baseHref );
      out.write("element/node.jsp?node={NODE_ID}\">{NODE_LABEL}</a>\n");
      out.write("        </td>\n");
      out.write("        <td class=\"node-marker-ipaddress\">\n");
      out.write("          {IP_ADDRESS}\n");
      out.write("        </td>\n");
      out.write("        <td class=\"node-marker-severity severity {SEVERITY_LABEL}\">\n");
      out.write("          <a href=\"");
      out.print( baseHref );
      out.write("alarm/list.htm?sortby=id&acktype=unack&limit=20&filter=node%3D{NODE_ID}\" target=\"_blank\">{SEVERITY_LABEL}</a>\n");
      out.write("        </td>\n");
      out.write("      </tr>\n");
      out.write("    </table>\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("$('");
      out.print( mapId );
      out.write("').ready(function() {\n");
      out.write("    geomap.render({\n");
      out.write("        baseHref: \"");
      out.print( baseHref );
      out.write("\",\n");
      out.write("        mapId: \"");
      out.print( mapId );
      out.write("\",\n");
      out.write("        hideControlsOnStartup: ");
      out.print( getParameter(request, "hideControlsOnStartup") );
      out.write(" ,\n");
      out.write("        strategy: \"");
      out.print( getParameter(request, "strategy") );
      out.write("\" ,\n");
      out.write("        severity: \"");
      out.print( getParameter(request, "severity") );
      out.write("\"\n");
      out.write("    })\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
