/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.48.v20220622
 * Generated at: 2023-03-30 11:12:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.includes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.opennms.web.category.Category;
import org.opennms.web.category.CategoryList;
import org.opennms.web.api.Util;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public final class categories_002dbox_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {



    CategoryList m_category_list;

    public void init() throws ServletException {
	m_category_list = new CategoryList();
    }

	// Creates a link to the rtc/category.jsp according to the selected outagesType.
	public String createCategoriesOutageLink(HttpServletResponse response, Category category, String outagesType, String linkTitle, String linkText) {
		if (category.getLastUpdated() != null) {
			if (linkTitle == null) {
				return String.format("<a href=\"%s\">%s</a>",
						response.encodeURL("/opennms/rtc/category.jsp?showoutages=" + outagesType + "&category=" + Util.encode(category.getName())),
						linkText);
			}
			return String.format("<a href=\"%s\" title=\"%s\">%s</a>",
					response.encodeURL("/opennms/rtc/category.jsp?showoutages=" + outagesType + "&category=" + Util.encode(category.getName())),
					linkTitle,
					linkText);
		}
		return linkText;
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.opennms.web.category.Category");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.opennms.web.api.Util");
    _jspx_imports_classes.add("org.opennms.web.category.CategoryList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

	Map<String, List<Category>> categoryData = m_category_list.getCategoryData();

	long earliestUpdate = m_category_list.getEarliestUpdate(categoryData);
	boolean opennmsDisconnect = m_category_list.isDisconnected(earliestUpdate);

	String titleName = "Availability Over the Past 24 Hours";
	if (opennmsDisconnect) {
		titleName = "Waiting for availability data. ";
		if (earliestUpdate > 0) {
			titleName += new Date(earliestUpdate).toString();
		} else {
			titleName += "One or more categories have never been updated.";
		}
	}

      out.write("\n");
      out.write("\n");
      out.write("<div class=\"card fix-subpixel\">\n");
      out.write("  <div class=\"card-header\">\n");
      out.write("    <span>");
      out.print( titleName );
      out.write("</span>\n");
      out.write("  </div>\n");
      out.write("\n");
      out.write("<table class=\"table table-sm severity\">\n");

	for (Iterator<String> i = categoryData.keySet().iterator(); i.hasNext(); ) {
	    String sectionName = i.next();

      out.write("\n");
      out.write("	<thead class=\"dark\">\n");
      out.write("		<tr>\n");
      out.write("			<th>");
      out.print( sectionName );
      out.write("</th>\n");
      out.write("			<th align=\"right\">Outages</th>\n");
      out.write("			<th align=\"right\">Availability</th>\n");
      out.write("		</tr>\n");
      out.write("	</thead>\n");

 	    List<Category> categories = categoryData.get(sectionName);

	    for (Iterator<Category> j = categories.iterator(); j.hasNext(); ) {
		Category category = j.next();

      out.write("\n");
      out.write("	<tr>\n");
      out.write("		<td>\n");
      out.write("			");
      out.print(createCategoriesOutageLink(response, category, "all", category.getTitle(), category.getName()));
      out.write("\n");
      out.write("		</td>\n");
      out.write("		<td class=\"severity-");
      out.print( (opennmsDisconnect ? "indeterminate" : category.getOutageClass().toLowerCase()) );
      out.write(" bright divider\"\n");
      out.write("	        align=\"right\"\n");
      out.write("		    title=\"Updated: ");
      out.print( category.getLastUpdated() );
      out.write("\">\n");
      out.write("			");
      out.print(createCategoriesOutageLink(response, category, "outages", null, category.getOutageText()));
      out.write("\n");
      out.write("		</td>\n");
      out.write("		<td class=\"severity-");
      out.print( (opennmsDisconnect ? "indeterminate" : category.getAvailClass().toLowerCase()) );
      out.write(" bright divider\"\n");
      out.write("		    align=\"right\" \n");
      out.write("		    title=\"Updated: ");
      out.print( category.getLastUpdated() );
      out.write("\">\n");
      out.write("			");
      out.print(createCategoriesOutageLink(response, category, "avail", null, category.getAvailText()));
      out.write("\n");
      out.write("		</td>\n");
      out.write("	</tr>\n");
      out.write("	\n");

	    }
	}

      out.write("\n");
      out.write("</table>\n");
      out.write("<!-- </div> -->\n");
      out.write("</div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
