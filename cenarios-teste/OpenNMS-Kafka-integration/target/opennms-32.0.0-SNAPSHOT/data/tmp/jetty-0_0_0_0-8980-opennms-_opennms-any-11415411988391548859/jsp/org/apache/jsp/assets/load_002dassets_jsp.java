/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.48.v20220622
 * Generated at: 2023-03-30 11:12:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.assets;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.lang.*;
import java.util.*;
import org.opennms.web.assets.api.*;
import org.opennms.web.assets.impl.*;
import org.slf4j.*;
import org.owasp.encoder.Encode;
import com.google.common.collect.Sets;

public final class load_002dassets_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


private static final Logger LOG = LoggerFactory.getLogger(AssetLocator.class);
private static final Set<String> WHITELIST_ASSET_MEDIA = Sets.newHashSet("screen");
private static final Set<String> WHITELIST_ASSET_ASYNC = Sets.newHashSet("true");

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.lang");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("org.slf4j");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("org.opennms.web.assets.api");
    _jspx_imports_packages.add("org.opennms.web.assets.impl");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("com.google.common.collect.Sets");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

final AssetLocator locator = AssetLocatorImpl.getInstance();
//locator.reload();
final long lastModified = locator.lastModified();

if (locator == null) {
    LOG.warn("load-assets.jsp is missing the locator");
} else {
    final String media = request.getParameter("asset-media");
    final String mediaString = WHITELIST_ASSET_MEDIA.contains(media) ? " media=\"" + media + "\"" : "";
    final String type = request.getParameter("asset-type");
    final boolean defer = Boolean.valueOf(request.getParameter("asset-defer"));
    final String async = WHITELIST_ASSET_ASYNC.contains(request.getParameter("asset-async")) ? request.getParameter("asset-async") : null;

    Boolean minified = null;
    final String minifiedString = request.getParameter("minified");
    if (minifiedString != null && !"".equals(minifiedString.trim())) {
        minified = Boolean.valueOf(minifiedString);
    }

    final String[] assets = request.getParameterValues("asset");
    //if (LOG.isDebugEnabled()) LOG.debug("load-assets.jsp: assets={}, type={}, media={}", Arrays.toString(assets), type, media);

    for (final String assetParam : assets) {
        LOG.debug("load-assets.jsp: asset={}, type={}, media={}", assetParam, type, media);
        final Optional<Collection<AssetResource>> resources = minified == null? locator.getResources(assetParam) : locator.getResources(assetParam, minified);
        if (!resources.isPresent()) {
            LOG.warn("load-assets.jsp: resources not found for asset {}", assetParam);
        } else {
            for (final AssetResource resource : resources.get()) {
                final StringBuilder sb = new StringBuilder();
                if (type != null && !type.equals(resource.getType())) {
                    LOG.debug("load-assets.jsp: skipping type {} for asset {}, page requested {}", resource.getType(), assetParam, type);
                    continue;
                }
                if ("js".equals(resource.getType())) {
                    LOG.debug("load-assets.jsp: found javascript resource");
                    sb.append("<script ");
                    if (defer) {
                        sb.append("defer ");
                    }
                    if (async != null) {
                        sb.append("async=\"").append(async).append("\"");
                    }
                    sb.append("src=\"assets/")
                        .append(resource.getPath())
                        .append("?v=").append(lastModified)
                        .append("\"></script>");
                } else if ("css".equals(resource.getType())) {
                    LOG.debug("load-assets.jsp: found stylesheet resource");
                    sb.append("<link rel=\"stylesheet\" href=\"assets/")
                        .append(resource.getPath())
                        .append("?v=").append(lastModified)
                        .append("\"");
                    if (mediaString != null && !mediaString.trim().equals("")) {
                        sb.append(mediaString);
                    }
                    sb.append(">");
                } else {
                    LOG.warn("load-assets.jsp: unknown/unhandled asset resource type: {}", resource.getType());
                }
                if (sb.length() > 0) {
                    sb.append("\n");
                }
                LOG.debug("load-assets.jsp: Writing HTML: {}", sb.toString());
                out.write(sb.toString());
            }
        }
    }
}

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
