/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.48.v20220622
 * Generated at: 2023-03-30 11:12:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.includes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.opennms.core.utils.WebSecurityUtils;
import org.opennms.web.filter.Filter;
import org.opennms.web.notification.AcknowledgeType;
import org.opennms.web.notification.WebNotificationRepository;
import org.opennms.web.notification.filter.NotificationCriteria;
import org.opennms.web.notification.filter.UserFilter;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

public final class notification_002dbox_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	protected java.text.ChoiceFormat formatter = new java.text.ChoiceFormat( "0#no outstanding notices|1#1 outstanding notice|2#{0} outstanding notices" );

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.opennms.web.notification.filter.NotificationCriteria");
    _jspx_imports_classes.add("org.springframework.web.context.support.WebApplicationContextUtils");
    _jspx_imports_classes.add("org.opennms.core.utils.WebSecurityUtils");
    _jspx_imports_classes.add("org.opennms.web.notification.WebNotificationRepository");
    _jspx_imports_classes.add("org.opennms.web.filter.Filter");
    _jspx_imports_classes.add("org.springframework.web.context.WebApplicationContext");
    _jspx_imports_classes.add("org.opennms.web.notification.AcknowledgeType");
    _jspx_imports_classes.add("org.opennms.web.notification.filter.UserFilter");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

    WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(application);
    WebNotificationRepository repository = context.getBean(WebNotificationRepository.class);

    //optional parameter: node
    String nodeIdString = request.getParameter("node");

    String nodeFilter = "";

    if( nodeIdString != null ) {
        nodeFilter = "&amp;filter=node%3D" + WebSecurityUtils.sanitizeString(nodeIdString);
    }

      out.write("\n");
      out.write("\n");
      out.write("<div class=\"card\">\n");
      out.write("	<div class=\"card-header\">\n");
      out.write("		<span><a href=\"notification/index.jsp\">Notifications</a></span>\n");
      out.write("	</div>\n");
      out.write("	<div class=\"card-body\">\n");
      out.write("	<ul class=\"list-unstyled mb-0\">\n");
      out.write("		");
 if( nodeIdString == null ) { 
      out.write("\n");
      out.write("			<li>\n");
      out.write("			<i class=\"fa fa-fw fa-user\"></i>\n");
      out.write("			You have \n");
      out.write("			<a href=\"notification/browse?acktype=unack&amp;filter=");
      out.print( java.net.URLEncoder.encode("user="+request.getRemoteUser()) );
      out.write("\">\n");
      out.write("			");

				int count = repository.countMatchingNotifications(
					new NotificationCriteria(
						AcknowledgeType.UNACKNOWLEDGED, 
						new Filter[] { 
							new UserFilter(request.getRemoteUser())
						}
					)
				);
				String format = formatter.format( count );
				out.println( java.text.MessageFormat.format( format, new Object[] { new Integer(count) } ));
			
      out.write("\n");
      out.write("			</a>\n");
      out.write("			</li>\n");
      out.write("			<li>\n");
      out.write("			<i class=\"fa fa-fw fa-users\"></i>\n");
      out.write("				");

					count = repository.countMatchingNotifications(
							new NotificationCriteria(
									AcknowledgeType.UNACKNOWLEDGED,
									new Filter[0]
							)
					);
				 	if( count == 1) { 
      out.write("\n");
      out.write("						There is\n");
      out.write("					");
 } else { 
      out.write("\n");
      out.write("						There are\n");
      out.write("					");
 } 
      out.write("\n");
      out.write("				<a href=\"notification/browse?acktype=unack\">\n");
      out.write("				");

					format = formatter.format( count );
					out.println( java.text.MessageFormat.format( format, new Object[] { new Integer(count) } ));
				
      out.write("\n");
      out.write("			</a>\n");
      out.write("			</li>\n");
      out.write("			<li><i class=\"fa fa-fw fa-calendar\"></i> <a href=\"roles\">On-Call Schedule</a></li>\n");
      out.write("		");
 } else { 
      out.write("\n");
      out.write("			<li><a href=\"notification/browse?acktype=unack");
      out.print(nodeFilter);
      out.write("&amp;filter=");
      out.print( java.net.URLEncoder.encode("user="+request.getRemoteUser()) );
      out.write("\">\n");
      out.write("				Your outstanding notifications for this node \n");
      out.write("			</a></li>\n");
      out.write("			<li><a href=\"notification/browse?acktype=ack");
      out.print(nodeFilter);
      out.write("&amp;filter=");
      out.print( java.net.URLEncoder.encode("user="+request.getRemoteUser()) );
      out.write("\">\n");
      out.write("				Your acknowledged notifications for this node \n");
      out.write("			</a></li>\n");
      out.write("		");
 } 
      out.write("\n");
      out.write("	</ul>\n");
      out.write("	</div>\n");
      out.write("</div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
