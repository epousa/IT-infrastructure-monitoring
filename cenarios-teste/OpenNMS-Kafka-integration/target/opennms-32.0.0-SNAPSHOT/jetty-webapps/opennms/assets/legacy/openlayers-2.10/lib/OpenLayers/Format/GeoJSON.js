OpenLayers.Format.GeoJSON=OpenLayers.Class(OpenLayers.Format.JSON,{ignoreExtraDims:!1,initialize:function(e){OpenLayers.Format.JSON.prototype.initialize.apply(this,[e])},read:function(e,t,r){t=t||"FeatureCollection";var n=null,o=null;if(o="string"==typeof e?OpenLayers.Format.JSON.prototype.read.apply(this,[e,r]):e){if("string"!=typeof o.type)OpenLayers.Console.error("Bad GeoJSON - no type: "+e);else if(this.isValidType(o,t))switch(t){case"Geometry":try{n=this.parseGeometry(o)}catch(e){OpenLayers.Console.error(e)}break;case"Feature":try{(n=this.parseFeature(o)).type="Feature"}catch(e){OpenLayers.Console.error(e)}break;case"FeatureCollection":switch(n=[],o.type){case"Feature":try{n.push(this.parseFeature(o))}catch(e){n=null,OpenLayers.Console.error(e)}break;case"FeatureCollection":for(var i=0,s=o.features.length;i<s;++i)try{n.push(this.parseFeature(o.features[i]))}catch(e){n=null,OpenLayers.Console.error(e)}break;default:try{var a=this.parseGeometry(o);n.push(new OpenLayers.Feature.Vector(a))}catch(e){n=null,OpenLayers.Console.error(e)}}}}else OpenLayers.Console.error("Bad JSON: "+e);return n},isValidType:function(e,t){var r=!1;switch(t){case"Geometry":-1==OpenLayers.Util.indexOf(["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","Box","GeometryCollection"],e.type)?OpenLayers.Console.error("Unsupported geometry type: "+e.type):r=!0;break;case"FeatureCollection":r=!0;break;default:e.type==t?r=!0:OpenLayers.Console.error("Cannot convert types from "+e.type+" to "+t)}return r},parseFeature:function(e){var t,r,n,o;n=e.properties?e.properties:{},o=e.geometry&&e.geometry.bbox||e.bbox;try{r=this.parseGeometry(e.geometry)}catch(e){throw e}return t=new OpenLayers.Feature.Vector(r,n),o&&(t.bounds=OpenLayers.Bounds.fromArray(o)),e.id&&(t.fid=e.id),t},parseGeometry:function(e){if(null==e)return null;var t,r=!1;if("GeometryCollection"==e.type){if(!(e.geometries instanceof Array))throw"GeometryCollection must have geometries array: "+e;for(var n=e.geometries.length,o=new Array(n),i=0;i<n;++i)o[i]=this.parseGeometry.apply(this,[e.geometries[i]]);t=new OpenLayers.Geometry.Collection(o),r=!0}else{if(!(e.coordinates instanceof Array))throw"Geometry must have coordinates array: "+e;if(!this.parseCoords[e.type.toLowerCase()])throw"Unsupported geometry type: "+e.type;try{t=this.parseCoords[e.type.toLowerCase()].apply(this,[e.coordinates])}catch(e){throw e}}return this.internalProjection&&this.externalProjection&&!r&&t.transform(this.externalProjection,this.internalProjection),t},parseCoords:{point:function(e){if(0==this.ignoreExtraDims&&2!=e.length)throw"Only 2D points are supported: "+e;return new OpenLayers.Geometry.Point(e[0],e[1])},multipoint:function(e){for(var t=[],r=null,n=0,o=e.length;n<o;++n){try{r=this.parseCoords.point.apply(this,[e[n]])}catch(e){throw e}t.push(r)}return new OpenLayers.Geometry.MultiPoint(t)},linestring:function(e){for(var t=[],r=null,n=0,o=e.length;n<o;++n){try{r=this.parseCoords.point.apply(this,[e[n]])}catch(e){throw e}t.push(r)}return new OpenLayers.Geometry.LineString(t)},multilinestring:function(e){for(var t=[],r=null,n=0,o=e.length;n<o;++n){try{r=this.parseCoords.linestring.apply(this,[e[n]])}catch(e){throw e}t.push(r)}return new OpenLayers.Geometry.MultiLineString(t)},polygon:function(e){for(var t,r,n=[],o=0,i=e.length;o<i;++o){try{r=this.parseCoords.linestring.apply(this,[e[o]])}catch(e){throw e}t=new OpenLayers.Geometry.LinearRing(r.components),n.push(t)}return new OpenLayers.Geometry.Polygon(n)},multipolygon:function(e){for(var t=[],r=null,n=0,o=e.length;n<o;++n){try{r=this.parseCoords.polygon.apply(this,[e[n]])}catch(e){throw e}t.push(r)}return new OpenLayers.Geometry.MultiPolygon(t)},box:function(e){if(2!=e.length)throw"GeoJSON box coordinates must have 2 elements";return new OpenLayers.Geometry.Polygon([new OpenLayers.Geometry.LinearRing([new OpenLayers.Geometry.Point(e[0][0],e[0][1]),new OpenLayers.Geometry.Point(e[1][0],e[0][1]),new OpenLayers.Geometry.Point(e[1][0],e[1][1]),new OpenLayers.Geometry.Point(e[0][0],e[1][1]),new OpenLayers.Geometry.Point(e[0][0],e[0][1])])])}},write:function(e,t){var r={type:null};if(e instanceof Array){r.type="FeatureCollection";var n=e.length;r.features=new Array(n);for(var o=0;o<n;++o){var i=e[o];if(!i instanceof OpenLayers.Feature.Vector)throw"FeatureCollection only supports collections of features: "+i;r.features[o]=this.extract.feature.apply(this,[i])}}else 0==e.CLASS_NAME.indexOf("OpenLayers.Geometry")?r=this.extract.geometry.apply(this,[e]):e instanceof OpenLayers.Feature.Vector&&(r=this.extract.feature.apply(this,[e]),e.layer&&e.layer.projection&&(r.crs=this.createCRSObject(e)));return OpenLayers.Format.JSON.prototype.write.apply(this,[r,t])},createCRSObject:function(e){var t=e.layer.projection.toString(),r={};if(t.match(/epsg:/i)){var n=parseInt(t.substring(t.indexOf(":")+1));r=4326==n?{type:"OGC",properties:{urn:"urn:ogc:def:crs:OGC:1.3:CRS84"}}:{type:"EPSG",properties:{code:n}}}return r},extract:{feature:function(e){var t=this.extract.geometry.apply(this,[e.geometry]);return{type:"Feature",id:null==e.fid?e.id:e.fid,properties:e.attributes,geometry:t}},geometry:function(e){if(null==e)return null;this.internalProjection&&this.externalProjection&&(e=e.clone()).transform(this.internalProjection,this.externalProjection);var t=e.CLASS_NAME.split(".")[2],r=this.extract[t.toLowerCase()].apply(this,[e]);return"Collection"==t?{type:"GeometryCollection",geometries:r}:{type:t,coordinates:r}},point:function(e){return[e.x,e.y]},multipoint:function(e){for(var t=[],r=0,n=e.components.length;r<n;++r)t.push(this.extract.point.apply(this,[e.components[r]]));return t},linestring:function(e){for(var t=[],r=0,n=e.components.length;r<n;++r)t.push(this.extract.point.apply(this,[e.components[r]]));return t},multilinestring:function(e){for(var t=[],r=0,n=e.components.length;r<n;++r)t.push(this.extract.linestring.apply(this,[e.components[r]]));return t},polygon:function(e){for(var t=[],r=0,n=e.components.length;r<n;++r)t.push(this.extract.linestring.apply(this,[e.components[r]]));return t},multipolygon:function(e){for(var t=[],r=0,n=e.components.length;r<n;++r)t.push(this.extract.polygon.apply(this,[e.components[r]]));return t},collection:function(e){for(var t=e.components.length,r=new Array(t),n=0;n<t;++n)r[n]=this.extract.geometry.apply(this,[e.components[n]]);return r}},CLASS_NAME:"OpenLayers.Format.GeoJSON"});